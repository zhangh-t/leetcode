class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> ret;
        if(s.empty() || words.empty()) return ret;
        else
        {
        	  mutiset<int> wordshashs;
        	  int nWordCount = 0;
        	  for(auto iter = words.begin() ; iter != words.end(); ++iter)
        	  {
        	  	 wordshashs.insert(hash(*iter));
        	  	 ++nWordCount;
        	  }
        	  
        	  vector<int> shashs;
        	  int wordlength = words[0].length();
        	  int i = 0;
        	  int scount = 0;
        	  int slength = s.length();
        	  string substr;
        	  while( i < slength)
        	  {
        	  	 substr = std::move(s.substr(i, i + wordlength - 1));
        	  	 shashs.push_back(hash(substr));
        	  	 i += slength
        	  	 ++scount;
        	  }
        	  
        	  i = 0;
        	  int j = 0;
        	  bool bFound;
        	  while (i < scount)
        	  {
        	  	 j = 0;
        	  	 bFound = true;
        	  	 while( j < nWordCount)
        	  	 {
        	  	 	  if(wordshashs.find(shashs[i + j]) == wordshashs.end())
        	  	 	  {
        	  	 	  	 i += (j + 1);
        	  	 	  	 bFound = false;
        	  	 	  	 break;
        	  	 	  }
        	  	 	  ++j;
        	  	 }
        	  	 if(bFound)
        	  	 {
        	  	 	  ret.push_back(i * nWordCount);
        	  	 }
        	  }
        	  return ret;
        }	    
    }
private:
	  int hash(string& s)
	  {
	  	 int length = s.length();
	  	 int nRet = 0;
	  	 for(int i = 0 ; i < length; ++i)
	  	 {
	  	 	  int nhash = s[i] - 'a';
	  	 	  nRet *= 100;
	  	 	  nRet += nhash;
	  	 }
	  	 return nRet;
	  }
};